{"version":3,"sources":["components/Search.js","components/Header.js","components/Add.js","components/AnnounsmentItem.js","components/AnnounsmentList.js","components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","className","placeholder","Component","Header","Add","type","AnnounsmentItem","this","props","announcement","onDeleted","key","date","toString","title","description","onClick","AnnounsmentList","announcements","map","Edit","App","delItem","setState","filter","a","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAGaA,G,MAAb,4MACIC,MAAO,GADX,uDAKQ,OACI,yBAAKC,UAAU,UAEZ,2BAAOC,YAAY,SAASD,UAAU,gBARrD,GAA4BE,cCMbC,EAPA,WAEP,OACI,8CCFCC,EAAb,uKAGQ,OACI,yBAAKJ,UAAU,OACX,gDACA,8BACI,wCAAoB,2BAAOK,KAAK,SAAQ,6BACxC,8CAA0B,mCAAW,6BAErC,4BAAQA,KAAK,UAAb,aAVpB,GAAyBH,aCDJI,E,uKAKR,IAAD,EAC8BC,KAAKC,MAAhCC,EADH,EACGA,aAAcC,EADjB,EACiBA,UACrB,OAGI,wBAAIC,IAAKF,EAAaG,KAAKC,YACvB,4BAAKJ,EAAaK,OAClB,2BAAIL,EAAaM,aACjB,8BAAON,EAAaG,MAHxB,IAGqC,6BACjC,4BAAQZ,UAAU,QAAlB,QAEA,4BACIA,UAAU,MACVgB,QAAWN,GAFf,e,GAhB6BR,aCEhCe,EAAkB,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,cAAeR,EAAe,EAAfA,UAE5C,OACI,6BAEI,4BACKQ,EAAcC,KAAI,SAAAV,GAAY,OAC1B,kBAAC,EAAD,CACGA,aAAcA,EAClBC,UAAW,kBAAMA,EAAUD,EAAaK,gBCX/CM,EAAb,4MACIrB,MAAO,GADX,uDAKQ,OACI,yBAAKC,UAAU,QACX,iDACA,8BACI,wCAAoB,2BAAOK,KAAK,SAAQ,6BACxC,8CAA0B,mCAAW,6BACrC,uCAAmB,2BAAOA,KAAK,SAAQ,6BACvC,4BAAQA,KAAK,UAAb,cAZpB,GAA0BH,aCMLmB,E,4MACrBtB,MAAQ,CACJmB,cAAgB,CAAC,CACbJ,MAAO,IACPC,YAAa,UACbH,KAAM,cAEN,CACIE,MAAO,KACPC,YAAa,cACbH,KAAM,gB,EAGlBU,QAAU,SAACR,GACP,EAAKS,UACD,YAEI,MAAM,CACFL,cAHa,EAAnBA,cAC6BM,QAAO,SAAAC,GAAC,OAAIA,EAAEX,QAAQA,U,uDAUrD,OACI,oCACI,yBAAKd,UAAU,UACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,UACX,kBAAC,EAAD,OAER,yBAAKA,UAAU,OACZ,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIkB,cAAeX,KAAKR,MAAMmB,cAC1BR,UAAWH,KAAKe,UAEf,kBAAC,EAAD,Y,GAxCapB,aCIbwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d3174a8a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nexport class Search extends Component {\r\n    state ={\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Search\">\r\n\r\n               <input placeholder='search' className='search'/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n\r\n        return (\r\n            <h1>Announcements</h1>\r\n        );\r\n\r\n}\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\n\r\nexport class Add extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Add\">\r\n                <h2>Add announcement</h2>\r\n                <form>\r\n                    <label>Title</label><input type='text'/><br/>\r\n                    <label>Description</label><textarea/><br/>\r\n\r\n                    <button type='submit'>Add</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport default class AnnounsmentItem extends Component {\r\n\r\n\r\n\r\n\r\n    render(){\r\n        const {announcement, onDeleted} = this.props;\r\n        return (\r\n\r\n\r\n            <li key={announcement.date.toString()}>\r\n                <h4>{announcement.title}</h4>\r\n                <p>{announcement.description}</p>\r\n                <span>{announcement.date}</span> <br/>\r\n                <button className='edit'\r\n                >Edit</button>\r\n                <button\r\n                    className='del'\r\n                    onClick = {onDeleted}>\r\n                    Delete\r\n                </button>\r\n\r\n            </li>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport AnnounsmentItem from './AnnounsmentItem';\r\n\r\n\r\nexport const AnnounsmentList = ({announcements, onDeleted}) => {\r\n\r\n    return (\r\n        <div>\r\n\r\n            <ul>\r\n                {announcements.map(announcement =>\r\n                    (<AnnounsmentItem\r\n                        announcement={announcement}\r\n                    onDeleted={() => onDeleted(announcement.title)}/>)\r\n                )\r\n                }\r\n            </ul>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport class Edit extends Component {\r\n    state ={\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Edit\">\r\n                <h2>Edit announcement</h2>\r\n                <form>\r\n                    <label>Title</label><input type='text'/><br/>\r\n                    <label>Description</label><textarea/><br/>\r\n                    <label>Date</label><input type='date'/><br/>\r\n                    <button type='submit'>Edit</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {Search} from './components/Search';\nimport Header from './components/Header';\nimport {Add} from './components/Add';\nimport {AnnounsmentList} from './components/AnnounsmentList';\nimport {Edit} from './components/Edit';\n\nexport default class App extends Component {\nstate = {\n    announcements : [{\n        title: '1',\n        description: 'lorem10',\n        date: '22.10.1985'\n    },\n        {\n            title: '11',\n            description: 'lorem101111',\n            date: '22.09.1985'\n        }]\n}\ndelItem = (title) => {\n    this.setState(\n        ({announcements}) => {\n          let announc =  announcements.filter(a => a.title!==title);\n            return{\n                announcements: announc\n            };\n\n        }\n    );\n}\n    render(){\n\n        return (\n            <>\n                <div className=\"Header\">\n                    <Header />\n                </div>\n                <div className=\"Search\">\n                    <Search/>\n                </div>\n            <div className=\"App\">\n               <Add />\n               <AnnounsmentList\n                   announcements={this.state.announcements}\n                   onDeleted={this.delItem}/>\n\n                    <Edit />\n\n            </div>\n            </>\n        );\n    }}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}